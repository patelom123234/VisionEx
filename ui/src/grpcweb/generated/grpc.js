// @ts-nocheck
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: grpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_web_1 from "grpc-web";
export var visionex;
(function (visionex) {
    var grpc;
    (function (grpc) {
        var _TranslateTextFromImageRequest_one_of_decls, _TranslateTextFromImageResponse_one_of_decls, _Sentence_one_of_decls, _TranslateToMarkdownRequest_one_of_decls, _TranslateToImageRequest_one_of_decls, _TranslateToMarkdownResponse_one_of_decls, _TranslateToImageResponse_one_of_decls, _SignInRequest_one_of_decls, _SignInResponse_one_of_decls;
        let Language;
        (function (Language) {
            Language[Language["LANGUAGE_UNSPECIFIED"] = 0] = "LANGUAGE_UNSPECIFIED";
            Language[Language["LANGUAGE_EN_US"] = 1] = "LANGUAGE_EN_US";
            Language[Language["LANGUAGE_KO_KR"] = 2] = "LANGUAGE_KO_KR";
            Language[Language["LANGUAGE_JA_JP"] = 3] = "LANGUAGE_JA_JP";
        })(Language = grpc.Language || (grpc.Language = {}));
        let Model;
        (function (Model) {
            Model[Model["MODEL_UNSPECIFIED"] = 0] = "MODEL_UNSPECIFIED";
            Model[Model["MODEL_GPT4O"] = 1] = "MODEL_GPT4O";
            Model[Model["MODEL_GPT4O_MINI"] = 2] = "MODEL_GPT4O_MINI";
            Model[Model["MODEL_GEMINI_FLASH"] = 3] = "MODEL_GEMINI_FLASH";
        })(Model = grpc.Model || (grpc.Model = {}));
        class TranslateTextFromImageRequest extends pb_1.Message {
            constructor(data) {
                super();
                _TranslateTextFromImageRequest_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _TranslateTextFromImageRequest_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("image" in data && data.image != undefined) {
                        this.image = data.image;
                    }
                    if ("targetLanguage" in data && data.targetLanguage != undefined) {
                        this.targetLanguage = data.targetLanguage;
                    }
                }
            }
            get image() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0));
            }
            set image(value) {
                pb_1.Message.setField(this, 1, value);
            }
            get targetLanguage() {
                return pb_1.Message.getFieldWithDefault(this, 2, Language.LANGUAGE_UNSPECIFIED);
            }
            set targetLanguage(value) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
                const message = new TranslateTextFromImageRequest({});
                if (data.image != null) {
                    message.image = data.image;
                }
                if (data.targetLanguage != null) {
                    message.targetLanguage = data.targetLanguage;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.image != null) {
                    data.image = this.image;
                }
                if (this.targetLanguage != null) {
                    data.targetLanguage = this.targetLanguage;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.image.length)
                    writer.writeBytes(1, this.image);
                if (this.targetLanguage != Language.LANGUAGE_UNSPECIFIED)
                    writer.writeEnum(2, this.targetLanguage);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateTextFromImageRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.image = reader.readBytes();
                            break;
                        case 2:
                            message.targetLanguage = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return TranslateTextFromImageRequest.deserialize(bytes);
            }
        }
        _TranslateTextFromImageRequest_one_of_decls = new WeakMap();
        grpc.TranslateTextFromImageRequest = TranslateTextFromImageRequest;
        class TranslateTextFromImageResponse extends pb_1.Message {
            constructor(data) {
                super();
                _TranslateTextFromImageResponse_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __classPrivateFieldGet(this, _TranslateTextFromImageResponse_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("uriImage" in data && data.uriImage != undefined) {
                        this.uriImage = data.uriImage;
                    }
                    if ("sentences" in data && data.sentences != undefined) {
                        this.sentences = data.sentences;
                    }
                }
            }
            get uriImage() {
                return pb_1.Message.getFieldWithDefault(this, 1, "");
            }
            set uriImage(value) {
                pb_1.Message.setField(this, 1, value);
            }
            get sentences() {
                return pb_1.Message.getRepeatedWrapperField(this, Sentence, 2);
            }
            set sentences(value) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data) {
                const message = new TranslateTextFromImageResponse({});
                if (data.uriImage != null) {
                    message.uriImage = data.uriImage;
                }
                if (data.sentences != null) {
                    message.sentences = data.sentences.map(item => Sentence.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.uriImage != null) {
                    data.uriImage = this.uriImage;
                }
                if (this.sentences != null) {
                    data.sentences = this.sentences.map((item) => item.toObject());
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.uriImage.length)
                    writer.writeString(1, this.uriImage);
                if (this.sentences.length)
                    writer.writeRepeatedMessage(2, this.sentences, (item) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateTextFromImageResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.uriImage = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.sentences, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Sentence.deserialize(reader), Sentence));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return TranslateTextFromImageResponse.deserialize(bytes);
            }
        }
        _TranslateTextFromImageResponse_one_of_decls = new WeakMap();
        grpc.TranslateTextFromImageResponse = TranslateTextFromImageResponse;
        class Sentence extends pb_1.Message {
            constructor(data) {
                super();
                _Sentence_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Sentence_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("text" in data && data.text != undefined) {
                        this.text = data.text;
                    }
                    if ("translatedText" in data && data.translatedText != undefined) {
                        this.translatedText = data.translatedText;
                    }
                }
            }
            get text() {
                return pb_1.Message.getFieldWithDefault(this, 1, "");
            }
            set text(value) {
                pb_1.Message.setField(this, 1, value);
            }
            get translatedText() {
                return pb_1.Message.getFieldWithDefault(this, 2, "");
            }
            set translatedText(value) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
                const message = new Sentence({});
                if (data.text != null) {
                    message.text = data.text;
                }
                if (data.translatedText != null) {
                    message.translatedText = data.translatedText;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.text != null) {
                    data.text = this.text;
                }
                if (this.translatedText != null) {
                    data.translatedText = this.translatedText;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.text.length)
                    writer.writeString(1, this.text);
                if (this.translatedText.length)
                    writer.writeString(2, this.translatedText);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Sentence();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.text = reader.readString();
                            break;
                        case 2:
                            message.translatedText = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return Sentence.deserialize(bytes);
            }
        }
        _Sentence_one_of_decls = new WeakMap();
        grpc.Sentence = Sentence;
        class TranslateToMarkdownRequest extends pb_1.Message {
            constructor(data) {
                super();
                _TranslateToMarkdownRequest_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _TranslateToMarkdownRequest_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("targetLanguage" in data && data.targetLanguage != undefined) {
                        this.targetLanguage = data.targetLanguage;
                    }
                    if ("model" in data && data.model != undefined) {
                        this.model = data.model;
                    }
                    if ("image" in data && data.image != undefined) {
                        this.image = data.image;
                    }
                }
            }
            get targetLanguage() {
                return pb_1.Message.getFieldWithDefault(this, 2, Language.LANGUAGE_UNSPECIFIED);
            }
            set targetLanguage(value) {
                pb_1.Message.setField(this, 2, value);
            }
            get model() {
                return pb_1.Message.getFieldWithDefault(this, 3, Model.MODEL_UNSPECIFIED);
            }
            set model(value) {
                pb_1.Message.setField(this, 3, value);
            }
            get image() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0));
            }
            set image(value) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
                const message = new TranslateToMarkdownRequest({});
                if (data.targetLanguage != null) {
                    message.targetLanguage = data.targetLanguage;
                }
                if (data.model != null) {
                    message.model = data.model;
                }
                if (data.image != null) {
                    message.image = data.image;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.targetLanguage != null) {
                    data.targetLanguage = this.targetLanguage;
                }
                if (this.model != null) {
                    data.model = this.model;
                }
                if (this.image != null) {
                    data.image = this.image;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.targetLanguage != Language.LANGUAGE_UNSPECIFIED)
                    writer.writeEnum(2, this.targetLanguage);
                if (this.model != Model.MODEL_UNSPECIFIED)
                    writer.writeEnum(3, this.model);
                if (this.image.length)
                    writer.writeBytes(4, this.image);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateToMarkdownRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 2:
                            message.targetLanguage = reader.readEnum();
                            break;
                        case 3:
                            message.model = reader.readEnum();
                            break;
                        case 4:
                            message.image = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return TranslateToMarkdownRequest.deserialize(bytes);
            }
        }
        _TranslateToMarkdownRequest_one_of_decls = new WeakMap();
        grpc.TranslateToMarkdownRequest = TranslateToMarkdownRequest;
        class TranslateToImageRequest extends pb_1.Message {
            constructor(data) {
                super();
                _TranslateToImageRequest_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _TranslateToImageRequest_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("targetLanguage" in data && data.targetLanguage != undefined) {
                        this.targetLanguage = data.targetLanguage;
                    }
                    if ("image" in data && data.image != undefined) {
                        this.image = data.image;
                    }
                }
            }
            get targetLanguage() {
                return pb_1.Message.getFieldWithDefault(this, 2, Language.LANGUAGE_UNSPECIFIED);
            }
            set targetLanguage(value) {
                pb_1.Message.setField(this, 2, value);
            }
            get image() {
                return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0));
            }
            set image(value) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
                const message = new TranslateToImageRequest({});
                if (data.targetLanguage != null) {
                    message.targetLanguage = data.targetLanguage;
                }
                if (data.image != null) {
                    message.image = data.image;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.targetLanguage != null) {
                    data.targetLanguage = this.targetLanguage;
                }
                if (this.image != null) {
                    data.image = this.image;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.targetLanguage != Language.LANGUAGE_UNSPECIFIED)
                    writer.writeEnum(2, this.targetLanguage);
                if (this.image.length)
                    writer.writeBytes(3, this.image);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateToImageRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 2:
                            message.targetLanguage = reader.readEnum();
                            break;
                        case 3:
                            message.image = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return TranslateToImageRequest.deserialize(bytes);
            }
        }
        _TranslateToImageRequest_one_of_decls = new WeakMap();
        grpc.TranslateToImageRequest = TranslateToImageRequest;
        class TranslateToMarkdownResponse extends pb_1.Message {
            constructor(data) {
                super();
                _TranslateToMarkdownResponse_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _TranslateToMarkdownResponse_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("markdown" in data && data.markdown != undefined) {
                        this.markdown = data.markdown;
                    }
                }
            }
            get markdown() {
                return pb_1.Message.getFieldWithDefault(this, 1, "");
            }
            set markdown(value) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
                const message = new TranslateToMarkdownResponse({});
                if (data.markdown != null) {
                    message.markdown = data.markdown;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.markdown != null) {
                    data.markdown = this.markdown;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.markdown.length)
                    writer.writeString(1, this.markdown);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateToMarkdownResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.markdown = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return TranslateToMarkdownResponse.deserialize(bytes);
            }
        }
        _TranslateToMarkdownResponse_one_of_decls = new WeakMap();
        grpc.TranslateToMarkdownResponse = TranslateToMarkdownResponse;
        class TranslateToImageResponse extends pb_1.Message {
            constructor(data) {
                super();
                _TranslateToImageResponse_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _TranslateToImageResponse_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("uriImage" in data && data.uriImage != undefined) {
                        this.uriImage = data.uriImage;
                    }
                }
            }
            get uriImage() {
                return pb_1.Message.getFieldWithDefault(this, 1, "");
            }
            set uriImage(value) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
                const message = new TranslateToImageResponse({});
                if (data.uriImage != null) {
                    message.uriImage = data.uriImage;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.uriImage != null) {
                    data.uriImage = this.uriImage;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.uriImage.length)
                    writer.writeString(1, this.uriImage);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateToImageResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.uriImage = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return TranslateToImageResponse.deserialize(bytes);
            }
        }
        _TranslateToImageResponse_one_of_decls = new WeakMap();
        grpc.TranslateToImageResponse = TranslateToImageResponse;
        class SignInRequest extends pb_1.Message {
            constructor(data) {
                super();
                _SignInRequest_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SignInRequest_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("googleOpenIdToken" in data && data.googleOpenIdToken != undefined) {
                        this.googleOpenIdToken = data.googleOpenIdToken;
                    }
                }
            }
            get googleOpenIdToken() {
                return pb_1.Message.getFieldWithDefault(this, 1, "");
            }
            set googleOpenIdToken(value) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
                const message = new SignInRequest({});
                if (data.googleOpenIdToken != null) {
                    message.googleOpenIdToken = data.googleOpenIdToken;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.googleOpenIdToken != null) {
                    data.googleOpenIdToken = this.googleOpenIdToken;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.googleOpenIdToken.length)
                    writer.writeString(1, this.googleOpenIdToken);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.googleOpenIdToken = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return SignInRequest.deserialize(bytes);
            }
        }
        _SignInRequest_one_of_decls = new WeakMap();
        grpc.SignInRequest = SignInRequest;
        class SignInResponse extends pb_1.Message {
            constructor(data) {
                super();
                _SignInResponse_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SignInResponse_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("token" in data && data.token != undefined) {
                        this.token = data.token;
                    }
                }
            }
            get token() {
                return pb_1.Message.getFieldWithDefault(this, 1, "");
            }
            set token(value) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
                const message = new SignInResponse({});
                if (data.token != null) {
                    message.token = data.token;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.token != null) {
                    data.token = this.token;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.token.length)
                    writer.writeString(1, this.token);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.token = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return SignInResponse.deserialize(bytes);
            }
        }
        _SignInResponse_one_of_decls = new WeakMap();
        grpc.SignInResponse = SignInResponse;
        class UnimplementedVisionExService {
        }
        Object.defineProperty(UnimplementedVisionExService, "definition", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                TranslateToImage: {
                    path: "/visionex.grpc.VisionEx/TranslateToImage",
                    requestStream: false,
                    responseStream: false,
                    requestSerialize: (message) => Buffer.from(message.serialize()),
                    requestDeserialize: (bytes) => TranslateToImageRequest.deserialize(new Uint8Array(bytes)),
                    responseSerialize: (message) => Buffer.from(message.serialize()),
                    responseDeserialize: (bytes) => TranslateToImageResponse.deserialize(new Uint8Array(bytes))
                },
                TranslateToMarkdown: {
                    path: "/visionex.grpc.VisionEx/TranslateToMarkdown",
                    requestStream: false,
                    responseStream: false,
                    requestSerialize: (message) => Buffer.from(message.serialize()),
                    requestDeserialize: (bytes) => TranslateToMarkdownRequest.deserialize(new Uint8Array(bytes)),
                    responseSerialize: (message) => Buffer.from(message.serialize()),
                    responseDeserialize: (bytes) => TranslateToMarkdownResponse.deserialize(new Uint8Array(bytes))
                },
                TranslateTextFromImage: {
                    path: "/visionex.grpc.VisionEx/TranslateTextFromImage",
                    requestStream: false,
                    responseStream: false,
                    requestSerialize: (message) => Buffer.from(message.serialize()),
                    requestDeserialize: (bytes) => TranslateTextFromImageRequest.deserialize(new Uint8Array(bytes)),
                    responseSerialize: (message) => Buffer.from(message.serialize()),
                    responseDeserialize: (bytes) => TranslateTextFromImageResponse.deserialize(new Uint8Array(bytes))
                },
                SignIn: {
                    path: "/visionex.grpc.VisionEx/SignIn",
                    requestStream: false,
                    responseStream: false,
                    requestSerialize: (message) => Buffer.from(message.serialize()),
                    requestDeserialize: (bytes) => SignInRequest.deserialize(new Uint8Array(bytes)),
                    responseSerialize: (message) => Buffer.from(message.serialize()),
                    responseDeserialize: (bytes) => SignInResponse.deserialize(new Uint8Array(bytes))
                }
            }
        });
        grpc.UnimplementedVisionExService = UnimplementedVisionExService;
        class VisionExClient {
            constructor(address, credentials, options) {
                Object.defineProperty(this, "_address", {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: void 0
                });
                Object.defineProperty(this, "_client", {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: void 0
                });
                if (!options)
                    options = {};
                options.format = options.format || "text";
                this._address = address;
                this._client = new grpc_web_1.GrpcWebClientBase(options);
            }
            TranslateToImage(message, metadata) {
                return this._client.thenableCall(this._address + "/visionex.grpc.VisionEx/TranslateToImage", message, metadata || {}, VisionExClient.TranslateToImage);
            }
            TranslateToMarkdown(message, metadata) {
                return this._client.thenableCall(this._address + "/visionex.grpc.VisionEx/TranslateToMarkdown", message, metadata || {}, VisionExClient.TranslateToMarkdown);
            }
            TranslateTextFromImage(message, metadata) {
                return this._client.thenableCall(this._address + "/visionex.grpc.VisionEx/TranslateTextFromImage", message, metadata || {}, VisionExClient.TranslateTextFromImage);
            }
            SignIn(message, metadata) {
                return this._client.thenableCall(this._address + "/visionex.grpc.VisionEx/SignIn", message, metadata || {}, VisionExClient.SignIn);
            }
        }
        Object.defineProperty(VisionExClient, "TranslateToImage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new grpc_web_1.MethodDescriptor("/visionex.grpc.VisionEx/TranslateToImage", grpc_web_1.MethodType.UNARY, TranslateToImageRequest, TranslateToImageResponse, (message) => message.serialize(), TranslateToImageResponse.deserialize)
        });
        Object.defineProperty(VisionExClient, "TranslateToMarkdown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new grpc_web_1.MethodDescriptor("/visionex.grpc.VisionEx/TranslateToMarkdown", grpc_web_1.MethodType.UNARY, TranslateToMarkdownRequest, TranslateToMarkdownResponse, (message) => message.serialize(), TranslateToMarkdownResponse.deserialize)
        });
        Object.defineProperty(VisionExClient, "TranslateTextFromImage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new grpc_web_1.MethodDescriptor("/visionex.grpc.VisionEx/TranslateTextFromImage", grpc_web_1.MethodType.UNARY, TranslateTextFromImageRequest, TranslateTextFromImageResponse, (message) => message.serialize(), TranslateTextFromImageResponse.deserialize)
        });
        Object.defineProperty(VisionExClient, "SignIn", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new grpc_web_1.MethodDescriptor("/visionex.grpc.VisionEx/SignIn", grpc_web_1.MethodType.UNARY, SignInRequest, SignInResponse, (message) => message.serialize(), SignInResponse.deserialize)
        });
        grpc.VisionExClient = VisionExClient;
    })(grpc = visionex.grpc || (visionex.grpc = {}));
})(visionex || (visionex = {}));
