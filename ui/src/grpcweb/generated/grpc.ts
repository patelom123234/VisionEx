// @ts-nocheck

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: grpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace visionex.grpc {
    export enum Language {
        LANGUAGE_UNSPECIFIED = 0,
        LANGUAGE_EN_US = 1,
        LANGUAGE_KO_KR = 2,
        LANGUAGE_JA_JP = 3
    }
    export enum Model {
        MODEL_UNSPECIFIED = 0,
        MODEL_GPT4O = 1,
        MODEL_GPT4O_MINI = 2,
        MODEL_GEMINI_FLASH = 3
    }
    export class TranslateTextFromImageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            image?: Uint8Array;
            targetLanguage?: Language;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("targetLanguage" in data && data.targetLanguage != undefined) {
                    this.targetLanguage = data.targetLanguage;
                }
            }
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set image(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get targetLanguage() {
            return pb_1.Message.getFieldWithDefault(this, 2, Language.LANGUAGE_UNSPECIFIED) as Language;
        }
        set targetLanguage(value: Language) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            image?: Uint8Array;
            targetLanguage?: Language;
        }): TranslateTextFromImageRequest {
            const message = new TranslateTextFromImageRequest({});
            if (data.image != null) {
                message.image = data.image;
            }
            if (data.targetLanguage != null) {
                message.targetLanguage = data.targetLanguage;
            }
            return message;
        }
        toObject() {
            const data: {
                image?: Uint8Array;
                targetLanguage?: Language;
            } = {};
            if (this.image != null) {
                data.image = this.image;
            }
            if (this.targetLanguage != null) {
                data.targetLanguage = this.targetLanguage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.image.length)
                writer.writeBytes(1, this.image);
            if (this.targetLanguage != Language.LANGUAGE_UNSPECIFIED)
                writer.writeEnum(2, this.targetLanguage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TranslateTextFromImageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateTextFromImageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.image = reader.readBytes();
                        break;
                    case 2:
                        message.targetLanguage = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TranslateTextFromImageRequest {
            return TranslateTextFromImageRequest.deserialize(bytes);
        }
    }
    export class TranslateTextFromImageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uriImage?: string;
            sentences?: Sentence[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uriImage" in data && data.uriImage != undefined) {
                    this.uriImage = data.uriImage;
                }
                if ("sentences" in data && data.sentences != undefined) {
                    this.sentences = data.sentences;
                }
            }
        }
        get uriImage() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uriImage(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sentences() {
            return pb_1.Message.getRepeatedWrapperField(this, Sentence, 2) as Sentence[];
        }
        set sentences(value: Sentence[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            uriImage?: string;
            sentences?: ReturnType<typeof Sentence.prototype.toObject>[];
        }): TranslateTextFromImageResponse {
            const message = new TranslateTextFromImageResponse({});
            if (data.uriImage != null) {
                message.uriImage = data.uriImage;
            }
            if (data.sentences != null) {
                message.sentences = data.sentences.map(item => Sentence.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                uriImage?: string;
                sentences?: ReturnType<typeof Sentence.prototype.toObject>[];
            } = {};
            if (this.uriImage != null) {
                data.uriImage = this.uriImage;
            }
            if (this.sentences != null) {
                data.sentences = this.sentences.map((item: Sentence) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uriImage.length)
                writer.writeString(1, this.uriImage);
            if (this.sentences.length)
                writer.writeRepeatedMessage(2, this.sentences, (item: Sentence) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TranslateTextFromImageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateTextFromImageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uriImage = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.sentences, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Sentence.deserialize(reader), Sentence));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TranslateTextFromImageResponse {
            return TranslateTextFromImageResponse.deserialize(bytes);
        }
    }
    export class Sentence extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            text?: string;
            translatedText?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("translatedText" in data && data.translatedText != undefined) {
                    this.translatedText = data.translatedText;
                }
            }
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get translatedText() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set translatedText(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            text?: string;
            translatedText?: string;
        }): Sentence {
            const message = new Sentence({});
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.translatedText != null) {
                message.translatedText = data.translatedText;
            }
            return message;
        }
        toObject() {
            const data: {
                text?: string;
                translatedText?: string;
            } = {};
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.translatedText != null) {
                data.translatedText = this.translatedText;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.text.length)
                writer.writeString(1, this.text);
            if (this.translatedText.length)
                writer.writeString(2, this.translatedText);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Sentence {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Sentence();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.text = reader.readString();
                        break;
                    case 2:
                        message.translatedText = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Sentence {
            return Sentence.deserialize(bytes);
        }
    }
    export class TranslateToMarkdownRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            targetLanguage?: Language;
            model?: Model;
            image?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("targetLanguage" in data && data.targetLanguage != undefined) {
                    this.targetLanguage = data.targetLanguage;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
            }
        }
        get targetLanguage() {
            return pb_1.Message.getFieldWithDefault(this, 2, Language.LANGUAGE_UNSPECIFIED) as Language;
        }
        set targetLanguage(value: Language) {
            pb_1.Message.setField(this, 2, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 3, Model.MODEL_UNSPECIFIED) as Model;
        }
        set model(value: Model) {
            pb_1.Message.setField(this, 3, value);
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set image(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            targetLanguage?: Language;
            model?: Model;
            image?: Uint8Array;
        }): TranslateToMarkdownRequest {
            const message = new TranslateToMarkdownRequest({});
            if (data.targetLanguage != null) {
                message.targetLanguage = data.targetLanguage;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            return message;
        }
        toObject() {
            const data: {
                targetLanguage?: Language;
                model?: Model;
                image?: Uint8Array;
            } = {};
            if (this.targetLanguage != null) {
                data.targetLanguage = this.targetLanguage;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.targetLanguage != Language.LANGUAGE_UNSPECIFIED)
                writer.writeEnum(2, this.targetLanguage);
            if (this.model != Model.MODEL_UNSPECIFIED)
                writer.writeEnum(3, this.model);
            if (this.image.length)
                writer.writeBytes(4, this.image);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TranslateToMarkdownRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateToMarkdownRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.targetLanguage = reader.readEnum();
                        break;
                    case 3:
                        message.model = reader.readEnum();
                        break;
                    case 4:
                        message.image = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TranslateToMarkdownRequest {
            return TranslateToMarkdownRequest.deserialize(bytes);
        }
    }
    export class TranslateToImageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            targetLanguage?: Language;
            image?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("targetLanguage" in data && data.targetLanguage != undefined) {
                    this.targetLanguage = data.targetLanguage;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
            }
        }
        get targetLanguage() {
            return pb_1.Message.getFieldWithDefault(this, 2, Language.LANGUAGE_UNSPECIFIED) as Language;
        }
        set targetLanguage(value: Language) {
            pb_1.Message.setField(this, 2, value);
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set image(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            targetLanguage?: Language;
            image?: Uint8Array;
        }): TranslateToImageRequest {
            const message = new TranslateToImageRequest({});
            if (data.targetLanguage != null) {
                message.targetLanguage = data.targetLanguage;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            return message;
        }
        toObject() {
            const data: {
                targetLanguage?: Language;
                image?: Uint8Array;
            } = {};
            if (this.targetLanguage != null) {
                data.targetLanguage = this.targetLanguage;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.targetLanguage != Language.LANGUAGE_UNSPECIFIED)
                writer.writeEnum(2, this.targetLanguage);
            if (this.image.length)
                writer.writeBytes(3, this.image);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TranslateToImageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateToImageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.targetLanguage = reader.readEnum();
                        break;
                    case 3:
                        message.image = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TranslateToImageRequest {
            return TranslateToImageRequest.deserialize(bytes);
        }
    }
    export class TranslateToMarkdownResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            markdown?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("markdown" in data && data.markdown != undefined) {
                    this.markdown = data.markdown;
                }
            }
        }
        get markdown() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set markdown(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            markdown?: string;
        }): TranslateToMarkdownResponse {
            const message = new TranslateToMarkdownResponse({});
            if (data.markdown != null) {
                message.markdown = data.markdown;
            }
            return message;
        }
        toObject() {
            const data: {
                markdown?: string;
            } = {};
            if (this.markdown != null) {
                data.markdown = this.markdown;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.markdown.length)
                writer.writeString(1, this.markdown);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TranslateToMarkdownResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateToMarkdownResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.markdown = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TranslateToMarkdownResponse {
            return TranslateToMarkdownResponse.deserialize(bytes);
        }
    }
    export class TranslateToImageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uriImage?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uriImage" in data && data.uriImage != undefined) {
                    this.uriImage = data.uriImage;
                }
            }
        }
        get uriImage() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uriImage(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uriImage?: string;
        }): TranslateToImageResponse {
            const message = new TranslateToImageResponse({});
            if (data.uriImage != null) {
                message.uriImage = data.uriImage;
            }
            return message;
        }
        toObject() {
            const data: {
                uriImage?: string;
            } = {};
            if (this.uriImage != null) {
                data.uriImage = this.uriImage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uriImage.length)
                writer.writeString(1, this.uriImage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TranslateToImageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslateToImageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uriImage = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TranslateToImageResponse {
            return TranslateToImageResponse.deserialize(bytes);
        }
    }
    export class SignInRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            googleOpenIdToken?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("googleOpenIdToken" in data && data.googleOpenIdToken != undefined) {
                    this.googleOpenIdToken = data.googleOpenIdToken;
                }
            }
        }
        get googleOpenIdToken() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set googleOpenIdToken(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            googleOpenIdToken?: string;
        }): SignInRequest {
            const message = new SignInRequest({});
            if (data.googleOpenIdToken != null) {
                message.googleOpenIdToken = data.googleOpenIdToken;
            }
            return message;
        }
        toObject() {
            const data: {
                googleOpenIdToken?: string;
            } = {};
            if (this.googleOpenIdToken != null) {
                data.googleOpenIdToken = this.googleOpenIdToken;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.googleOpenIdToken.length)
                writer.writeString(1, this.googleOpenIdToken);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.googleOpenIdToken = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignInRequest {
            return SignInRequest.deserialize(bytes);
        }
    }
    export class SignInResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): SignInResponse {
            const message = new SignInResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignInResponse {
            return SignInResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedVisionExService {
        static definition = {
            TranslateToImage: {
                path: "/visionex.grpc.VisionEx/TranslateToImage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TranslateToImageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TranslateToImageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TranslateToImageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TranslateToImageResponse.deserialize(new Uint8Array(bytes))
            },
            TranslateToMarkdown: {
                path: "/visionex.grpc.VisionEx/TranslateToMarkdown",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TranslateToMarkdownRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TranslateToMarkdownRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TranslateToMarkdownResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TranslateToMarkdownResponse.deserialize(new Uint8Array(bytes))
            },
            TranslateTextFromImage: {
                path: "/visionex.grpc.VisionEx/TranslateTextFromImage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TranslateTextFromImageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TranslateTextFromImageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TranslateTextFromImageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TranslateTextFromImageResponse.deserialize(new Uint8Array(bytes))
            },
            SignIn: {
                path: "/visionex.grpc.VisionEx/SignIn",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SignInRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SignInRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SignInResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SignInResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract TranslateToImage(call: grpc_1.ServerUnaryCall<TranslateToImageRequest, TranslateToImageResponse>, callback: grpc_1.sendUnaryData<TranslateToImageResponse>): void;
        abstract TranslateToMarkdown(call: grpc_1.ServerUnaryCall<TranslateToMarkdownRequest, TranslateToMarkdownResponse>, callback: grpc_1.sendUnaryData<TranslateToMarkdownResponse>): void;
        abstract TranslateTextFromImage(call: grpc_1.ServerUnaryCall<TranslateTextFromImageRequest, TranslateTextFromImageResponse>, callback: grpc_1.sendUnaryData<TranslateTextFromImageResponse>): void;
        abstract SignIn(call: grpc_1.ServerUnaryCall<SignInRequest, SignInResponse>, callback: grpc_1.sendUnaryData<SignInResponse>): void;
    }
    export class VisionExClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static TranslateToImage = new grpc_web_1.MethodDescriptor<TranslateToImageRequest, TranslateToImageResponse>("/visionex.grpc.VisionEx/TranslateToImage", grpc_web_1.MethodType.UNARY, TranslateToImageRequest, TranslateToImageResponse, (message: TranslateToImageRequest) => message.serialize(), TranslateToImageResponse.deserialize);
        TranslateToImage(message: TranslateToImageRequest, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<TranslateToImageRequest, TranslateToImageResponse>(this._address + "/visionex.grpc.VisionEx/TranslateToImage", message, metadata || {}, VisionExClient.TranslateToImage);
        }
        private static TranslateToMarkdown = new grpc_web_1.MethodDescriptor<TranslateToMarkdownRequest, TranslateToMarkdownResponse>("/visionex.grpc.VisionEx/TranslateToMarkdown", grpc_web_1.MethodType.UNARY, TranslateToMarkdownRequest, TranslateToMarkdownResponse, (message: TranslateToMarkdownRequest) => message.serialize(), TranslateToMarkdownResponse.deserialize);
        TranslateToMarkdown(message: TranslateToMarkdownRequest, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<TranslateToMarkdownRequest, TranslateToMarkdownResponse>(this._address + "/visionex.grpc.VisionEx/TranslateToMarkdown", message, metadata || {}, VisionExClient.TranslateToMarkdown);
        }
        private static TranslateTextFromImage = new grpc_web_1.MethodDescriptor<TranslateTextFromImageRequest, TranslateTextFromImageResponse>("/visionex.grpc.VisionEx/TranslateTextFromImage", grpc_web_1.MethodType.UNARY, TranslateTextFromImageRequest, TranslateTextFromImageResponse, (message: TranslateTextFromImageRequest) => message.serialize(), TranslateTextFromImageResponse.deserialize);
        TranslateTextFromImage(message: TranslateTextFromImageRequest, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<TranslateTextFromImageRequest, TranslateTextFromImageResponse>(this._address + "/visionex.grpc.VisionEx/TranslateTextFromImage", message, metadata || {}, VisionExClient.TranslateTextFromImage);
        }
        private static SignIn = new grpc_web_1.MethodDescriptor<SignInRequest, SignInResponse>("/visionex.grpc.VisionEx/SignIn", grpc_web_1.MethodType.UNARY, SignInRequest, SignInResponse, (message: SignInRequest) => message.serialize(), SignInResponse.deserialize);
        SignIn(message: SignInRequest, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<SignInRequest, SignInResponse>(this._address + "/visionex.grpc.VisionEx/SignIn", message, metadata || {}, VisionExClient.SignIn);
        }
    }
}
