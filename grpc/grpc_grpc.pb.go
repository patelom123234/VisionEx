// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: grpc/grpc.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VisionEx_TranslateToImage_FullMethodName       = "/visionex.grpc.VisionEx/TranslateToImage"
	VisionEx_TranslateToMarkdown_FullMethodName    = "/visionex.grpc.VisionEx/TranslateToMarkdown"
	VisionEx_TranslateTextFromImage_FullMethodName = "/visionex.grpc.VisionEx/TranslateTextFromImage"
	VisionEx_SignIn_FullMethodName                 = "/visionex.grpc.VisionEx/SignIn"
)

// VisionExClient is the client API for VisionEx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisionExClient interface {
	// Translates an image into a PNG format.
	// Currently only PNG, JPEG, WEBP and non-animated GIF are supported.
	// The image will be translated into the target language.
	TranslateToImage(ctx context.Context, in *TranslateToImageRequest, opts ...grpc.CallOption) (*TranslateToImageResponse, error)
	// Translates an image into a Markdown format.
	// Currently only PNG, JPEG, WEBP and non-animated GIF are supported.
	// The image will be translated into the target language.
	TranslateToMarkdown(ctx context.Context, in *TranslateToMarkdownRequest, opts ...grpc.CallOption) (*TranslateToMarkdownResponse, error)
	// Extracts text from image and translates it into the target language.
	// The image shows which sentence were detected as square.
	TranslateTextFromImage(ctx context.Context, in *TranslateTextFromImageRequest, opts ...grpc.CallOption) (*TranslateTextFromImageResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
}

type visionExClient struct {
	cc grpc.ClientConnInterface
}

func NewVisionExClient(cc grpc.ClientConnInterface) VisionExClient {
	return &visionExClient{cc}
}

func (c *visionExClient) TranslateToImage(ctx context.Context, in *TranslateToImageRequest, opts ...grpc.CallOption) (*TranslateToImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateToImageResponse)
	err := c.cc.Invoke(ctx, VisionEx_TranslateToImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionExClient) TranslateToMarkdown(ctx context.Context, in *TranslateToMarkdownRequest, opts ...grpc.CallOption) (*TranslateToMarkdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateToMarkdownResponse)
	err := c.cc.Invoke(ctx, VisionEx_TranslateToMarkdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionExClient) TranslateTextFromImage(ctx context.Context, in *TranslateTextFromImageRequest, opts ...grpc.CallOption) (*TranslateTextFromImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateTextFromImageResponse)
	err := c.cc.Invoke(ctx, VisionEx_TranslateTextFromImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionExClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, VisionEx_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisionExServer is the server API for VisionEx service.
// All implementations must embed UnimplementedVisionExServer
// for forward compatibility.
type VisionExServer interface {
	// Translates an image into a PNG format.
	// Currently only PNG, JPEG, WEBP and non-animated GIF are supported.
	// The image will be translated into the target language.
	TranslateToImage(context.Context, *TranslateToImageRequest) (*TranslateToImageResponse, error)
	// Translates an image into a Markdown format.
	// Currently only PNG, JPEG, WEBP and non-animated GIF are supported.
	// The image will be translated into the target language.
	TranslateToMarkdown(context.Context, *TranslateToMarkdownRequest) (*TranslateToMarkdownResponse, error)
	// Extracts text from image and translates it into the target language.
	// The image shows which sentence were detected as square.
	TranslateTextFromImage(context.Context, *TranslateTextFromImageRequest) (*TranslateTextFromImageResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	mustEmbedUnimplementedVisionExServer()
}

// UnimplementedVisionExServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVisionExServer struct{}

func (UnimplementedVisionExServer) TranslateToImage(context.Context, *TranslateToImageRequest) (*TranslateToImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateToImage not implemented")
}
func (UnimplementedVisionExServer) TranslateToMarkdown(context.Context, *TranslateToMarkdownRequest) (*TranslateToMarkdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateToMarkdown not implemented")
}
func (UnimplementedVisionExServer) TranslateTextFromImage(context.Context, *TranslateTextFromImageRequest) (*TranslateTextFromImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateTextFromImage not implemented")
}
func (UnimplementedVisionExServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedVisionExServer) mustEmbedUnimplementedVisionExServer() {}
func (UnimplementedVisionExServer) testEmbeddedByValue()                  {}

// UnsafeVisionExServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisionExServer will
// result in compilation errors.
type UnsafeVisionExServer interface {
	mustEmbedUnimplementedVisionExServer()
}

func RegisterVisionExServer(s grpc.ServiceRegistrar, srv VisionExServer) {
	// If the following call pancis, it indicates UnimplementedVisionExServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VisionEx_ServiceDesc, srv)
}

func _VisionEx_TranslateToImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateToImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionExServer).TranslateToImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisionEx_TranslateToImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionExServer).TranslateToImage(ctx, req.(*TranslateToImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisionEx_TranslateToMarkdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateToMarkdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionExServer).TranslateToMarkdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisionEx_TranslateToMarkdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionExServer).TranslateToMarkdown(ctx, req.(*TranslateToMarkdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisionEx_TranslateTextFromImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateTextFromImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionExServer).TranslateTextFromImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisionEx_TranslateTextFromImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionExServer).TranslateTextFromImage(ctx, req.(*TranslateTextFromImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisionEx_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionExServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisionEx_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionExServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VisionEx_ServiceDesc is the grpc.ServiceDesc for VisionEx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisionEx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "visionex.grpc.VisionEx",
	HandlerType: (*VisionExServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranslateToImage",
			Handler:    _VisionEx_TranslateToImage_Handler,
		},
		{
			MethodName: "TranslateToMarkdown",
			Handler:    _VisionEx_TranslateToMarkdown_Handler,
		},
		{
			MethodName: "TranslateTextFromImage",
			Handler:    _VisionEx_TranslateTextFromImage_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _VisionEx_SignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/grpc.proto",
}
